#!/usr/bin/env python3

from secrets import choice
from random import randrange
import string
import re
import hunspell

def main():
    '''Return a fully validated password string
    
    A password will be continuously randomly generated until it is fully validated to meet
    standard password requirements.
    '''
    gen_pwd = ""
    
    while not validate_pwd(gen_pwd):
        gen_pwd = generate_pwd()
        
    print(f"Your password is: { gen_pwd }")

def generate_pwd():
    '''Return a randomly generated password string

    A password string will be generated by randomly selecting a character from the following
    selection: 1) Uppercase letters, 2) Lowercase letters, 3) Digits, 4) Punctuations/Symbols. The
    password string's length will also be randomly generated from a range of 8 - 16.
    '''
    pwd_len = randrange(8, 16)
    selection = string.ascii_letters + string.digits + string.punctuation

    return ''.join(choice(selection) for i in range(pwd_len))

def validate_pwd(pwd):
    '''Return a boolean for meeting password requirements

    A given password will be checked to ensure that it contains at least one of the following:
    1) Uppercase letter, 2) Lowercase letter, 3) Digits, 4) Punctuations/Symbols. The password is
    also checked to ensure that no words exist as substrings.
    '''
    return (any(c.isupper() for c in pwd)
            and any(c.islower() for c in pwd)
            and any(c.isdigit() for c in pwd)
            and any(is_symbol(c) for c in pwd)
            and has_no_words(pwd))

def is_symbol(char):
    '''Return a boolean if character is a symbol

    Checks to see if a given character is symbol by verifiying whether or not it exists in the string
    module's punctuation collection.
    '''
    return char in string.punctuation

def has_no_words(pwd):
    '''Return a boolean if password contains words

    A given password will be searched for any substrings of letter characters that are of greater
    length than 2 characters. These substrings are then checked as to whether they are words using the
    Hunspell module to check for its spelling.
    '''
    hobj = hunspell.HunSpell(
        '/usr/share/hunspell/en_US.dic',
        '/usr/share/hunspell/en_US.aff'
    )
    word_regex = r"([a-zA-Z]{2,})"
    results = re.findall(word_regex, pwd)
    
    return not any(hobj.spell(w) for w in results)

if __name__ == "__main__":
    main()
